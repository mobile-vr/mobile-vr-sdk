diff --git "a/C:\\Users\\loicg\\Documents\\checkfilesdiff\\hello_ar_java-1.41.0\\hello_ar_java\\app\\src\\main\\java\\com\\google\\ar\\core\\examples\\java\\common\\samplerender\\Mesh.java" "b/C:\\Users\\loicg\\Documents\\checkfilesdiff\\texture_square\\app\\src\\main\\java\\com\\mobilevr\\modified\\samplerender\\Mesh.java"
index eeff6da..fe7c299 100644
--- "a/C:\\Users\\loicg\\Documents\\checkfilesdiff\\hello_ar_java-1.41.0\\hello_ar_java\\app\\src\\main\\java\\com\\google\\ar\\core\\examples\\java\\common\\samplerender\\Mesh.java"
+++ "b/C:\\Users\\loicg\\Documents\\checkfilesdiff\\texture_square\\app\\src\\main\\java\\com\\mobilevr\\modified\\samplerender\\Mesh.java"
@@ -13,20 +13,44 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.ar.core.examples.java.common.samplerender;
+
+/*
+ * Copyright 2024 MasterHansCoding (GitHub)
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ * Modifications:
+ *
+ * Get the detailed modifications in "Licenses/log_git_diff/diff_Mesh.diff"
+ * at root of this app.
+ */
+
+package com.mobilevr.modified.samplerender;
 
 import android.opengl.GLES30;
 import android.util.Log;
-import de.javagl.obj.Obj;
-import de.javagl.obj.ObjData;
-import de.javagl.obj.ObjReader;
-import de.javagl.obj.ObjUtils;
+
 import java.io.Closeable;
 import java.io.IOException;
 import java.io.InputStream;
 import java.nio.FloatBuffer;
 import java.nio.IntBuffer;
 
+import de.javagl.obj.Obj;
+import de.javagl.obj.ObjData;
+import de.javagl.obj.ObjReader;
+import de.javagl.obj.ObjUtils;
+
 /**
  * A collection of vertices, faces, and other attributes that define how to render a 3D object.
  *
@@ -75,12 +99,20 @@ public class Mesh implements Closeable {
    * correspond to their attribute locations, which must be taken into account in shader code. The
    * <a href="https://www.khronos.org/opengl/wiki/Layout_Qualifier_(GLSL)">layout qualifier</a> must
    * be used in the vertex shader code to explicitly associate attributes with these indices.
+   *
+   * @param render: (SampleRender)
+   * @param primitiveMode: (PrimitiveMode)
+   * @param indexBuffer: (IndexBuffer)
+   * @param vertexBuffers: (VertexBuffer)
+   * @param mode: (String) "useColor", "texture", "normal", this is the mode used by the Mesh
+   *            object, it depends on the used shader.
    */
   public Mesh(
       SampleRender render,
       PrimitiveMode primitiveMode,
       IndexBuffer indexBuffer,
-      VertexBuffer[] vertexBuffers) {
+      VertexBuffer[] vertexBuffers,
+      String mode) {
     if (vertexBuffers == null || vertexBuffers.length == 0) {
       throw new IllegalArgumentException("Must pass at least one vertex buffer");
     }
@@ -106,13 +138,113 @@ public class Mesh implements Closeable {
         // Bind each vertex buffer to vertex array
         GLES30.glBindBuffer(GLES30.GL_ARRAY_BUFFER, vertexBuffers[i].getBufferId());
         GLError.maybeThrowGLException("Failed to bind vertex buffer", "glBindBuffer");
-        GLES30.glVertexAttribPointer(
-            i, vertexBuffers[i].getNumberOfEntriesPerVertex(), GLES30.GL_FLOAT, false, 0, 0);
-        GLError.maybeThrowGLException(
-            "Failed to associate vertex buffer with vertex array", "glVertexAttribPointer");
-        GLES30.glEnableVertexAttribArray(i);
-        GLError.maybeThrowGLException(
-            "Failed to enable vertex buffer", "glEnableVertexAttribArray");
+
+        // Here you can add a if statement to the next series to define your own glVertexAttribPointer()
+        //    functions. mode == "useColor" defines 2 pointers since in the shader I used
+        //    layout (position=0) and layout (position=1) as you can see:
+        //
+        // vertex shader code of useColor=true:
+        /**
+         #version 320 es
+
+         uniform highp mat4 uMVPMatrix;
+         layout (location = 0) in lowp vec4 a_position;
+         layout (location = 1) in lowp vec4 a_color;
+         out lowp vec4 ourColor;
+
+         void main() {
+           // the matrix must be included as a modifier of gl_Position
+           // Note that the uMVPMatrix factor *must be first* in order
+           // for the matrix multiplication product to be correct.
+
+           gl_Position = uMVPMatrix * a_position;
+           //gl_Position = a_position;
+           ourColor = a_color;
+         }
+
+         Fragment shader:
+
+         #version 320 es
+
+         precision lowp float;
+         in lowp vec4 ourColor;
+         out lowp vec4 gl_FragColor;
+
+         void main() {
+           gl_FragColor = ourColor;
+         }
+
+         */
+        // The first glVertexAttribPointer tells Open GL where to get the a_position vector
+        // and the second tells where to get a_color inside the vertexBuffer previously given.
+        if (mode == "useColor") {
+          // a_position
+          GLES30.glVertexAttribPointer(
+                  i, 3, GLES30.GL_FLOAT, false, 6*4, 0);
+          GLError.maybeThrowGLException(
+                  "Failed to associate vertex buffer with vertex array", "glVertexAttribPointer");
+          GLES30.glEnableVertexAttribArray(i);
+          GLError.maybeThrowGLException(
+                  "Failed to enable vertex buffer", "glEnableVertexAttribArray");
+
+          // a_color
+          GLES30.glVertexAttribPointer(
+                  i+1, 3, GLES30.GL_FLOAT, false, 6*4, 3*4);
+          GLError.maybeThrowGLException(
+                  "Failed to associate vertex buffer with vertex array", "glVertexAttribPointer");
+          GLES30.glEnableVertexAttribArray(i+1);
+          GLError.maybeThrowGLException(
+                  "Failed to enable vertex buffer", "glEnableVertexAttribArray");
+
+
+        /*
+          "texture" mode is using:
+           - aPos: the position.
+           - aColor: the color of the face.
+           - aTexCoord: the 2D coordinate of the texture.
+        */
+        } else if (mode == "texture") {
+          // aPos
+          GLES30.glVertexAttribPointer(
+                  i, 3, GLES30.GL_FLOAT, false, 8*4, 0);
+          GLError.maybeThrowGLException(
+                  "Failed to associate vertex buffer with vertex array", "glVertexAttribPointer");
+          GLES30.glEnableVertexAttribArray(i);
+          GLError.maybeThrowGLException(
+                  "Failed to enable vertex buffer", "glEnableVertexAttribArray");
+
+          // aColor
+          GLES30.glVertexAttribPointer(
+                  i+1, 3, GLES30.GL_FLOAT, false, 8*4, 3*4);
+          GLError.maybeThrowGLException(
+                  "Failed to associate vertex buffer with vertex array", "glVertexAttribPointer");
+          GLES30.glEnableVertexAttribArray(i+1);
+          GLError.maybeThrowGLException(
+                  "Failed to enable vertex buffer", "glEnableVertexAttribArray");
+
+          // aTextCoord
+          GLES30.glVertexAttribPointer(
+                  i+2, 2, GLES30.GL_FLOAT, false, 8*4, 6*4);
+          GLError.maybeThrowGLException(
+                  "Failed to associate vertex buffer with vertex array", "glVertexAttribPointer");
+          GLES30.glEnableVertexAttribArray(i+2);
+          GLError.maybeThrowGLException(
+                  "Failed to enable vertex buffer", "glEnableVertexAttribArray");
+
+        /*
+          "simple" mode is only considering the 3D position.
+         */
+        } else if (mode == "simple") {
+          GLES30.glVertexAttribPointer(
+                  i, vertexBuffers[i].getNumberOfEntriesPerVertex(), GLES30.GL_FLOAT, false, 0, 0);
+          GLError.maybeThrowGLException(
+                  "Failed to associate vertex buffer with vertex array", "glVertexAttribPointer");
+          GLES30.glEnableVertexAttribArray(i);
+          GLError.maybeThrowGLException(
+                  "Failed to enable vertex buffer", "glEnableVertexAttribArray");
+        } else {
+          throw new IllegalArgumentException("argument mode provided doesn't exist");
+        }
       }
     } catch (Throwable t) {
       close();
@@ -126,6 +258,11 @@ public class Mesh implements Closeable {
    * <p>The {@link Mesh} will be constructed with three attributes, indexed in the order of local
    * coordinates (location 0, vec3), texture coordinates (location 1, vec2), and vertex normals
    * (location 2, vec3).
+   *
+   * @param render: (SampleRender)
+   * @param assetFileName: (String)
+   * @return (Mesh)
+   * @throws IOException: when the file isn't found.
    */
   public static Mesh createFromAsset(SampleRender render, String assetFileName) throws IOException {
     try (InputStream inputStream = render.getAssets().open(assetFileName)) {
@@ -145,7 +282,7 @@ public class Mesh implements Closeable {
 
       IndexBuffer indexBuffer = new IndexBuffer(render, vertexIndices);
 
-      return new Mesh(render, Mesh.PrimitiveMode.TRIANGLES, indexBuffer, vertexBuffers);
+      return new Mesh(render, PrimitiveMode.TRIANGLES, indexBuffer, vertexBuffers, "simple");
     }
   }
 
@@ -176,19 +313,19 @@ public class Mesh implements Closeable {
         int iterCount = vertexBuffers[i].getNumberOfVertices();
         if (iterCount != vertexCount) {
           throw new IllegalStateException(
-              String.format(
-                  "Vertex buffers have mismatching numbers of vertices ([0] has %d but [%d] has"
-                      + " %d)",
-                  vertexCount, i, iterCount));
+                  String.format(
+                          "Vertex buffers have mismatching numbers of vertices ([0] has %d but [%d] has"
+                                  + " %d)",
+                          vertexCount, i, iterCount));
         }
       }
       GLES30.glDrawArrays(primitiveMode.glesEnum, 0, vertexCount);
       GLError.maybeThrowGLException("Failed to draw vertex array object", "glDrawArrays");
     } else {
       GLES30.glDrawElements(
-          primitiveMode.glesEnum, indexBuffer.getSize(), GLES30.GL_UNSIGNED_INT, 0);
+              primitiveMode.glesEnum, indexBuffer.getSize(), GLES30.GL_UNSIGNED_INT, 0);
       GLError.maybeThrowGLException(
-          "Failed to draw vertex array object with indices", "glDrawElements");
+              "Failed to draw vertex array object with indices", "glDrawElements");
     }
   }
 }
