diff --git "a/C:\\Users\\loicg\\Documents\\checkfilesdiff\\hello_ar_java-1.41.0\\hello_ar_java\\app\\src\\main\\java\\com\\google\\ar\\core\\examples\\java\\helloar\\HelloArActivity.java" "b/C:\\Users\\loicg\\Documents\\checkfilesdiff\\texture_square\\app\\src\\main\\java\\com\\example\\myapp\\HelloArActivity.java"
index 7320df0..6ce11ca 100644
--- "a/C:\\Users\\loicg\\Documents\\checkfilesdiff\\hello_ar_java-1.41.0\\hello_ar_java\\app\\src\\main\\java\\com\\google\\ar\\core\\examples\\java\\helloar\\HelloArActivity.java"
+++ "b/C:\\Users\\loicg\\Documents\\checkfilesdiff\\texture_square\\app\\src\\main\\java\\com\\example\\myapp\\HelloArActivity.java"
@@ -14,61 +14,66 @@
  * limitations under the License.
  */
 
-package com.google.ar.core.examples.java.helloar;
+/*
+ * Copyright 2024 MasterHansCoding (GitHub)
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ * Modifications:
+ *
+ * Get the detailed modifications in "Licenses/log_git_diff/diff_HelloArActivity.diff"
+ * at root of this app.
+ */
 
-import android.content.DialogInterface;
-import android.content.res.Resources;
+package com.example.myapp;
+
+import com.baseapp.R;
+
+import static com.mobilevr.utils.GeometryUtils.getFingerQuaternion;
+import static com.mobilevr.utils.QuaternionUtils.quaternionToMatrix;
+import com.mobilevr.handstracking.HandsTrackingThread;
+import com.mobilevr.designobjects.VirtualObject;
+import com.mobilevr.modified.samplerender.Texture;
+import com.mobilevr.modified.samplerender.arcore.BackgroundRenderer;
+import com.mobilevr.modified.samplerender.Framebuffer;
+import com.mobilevr.modified.samplerender.Mesh;
+import com.mobilevr.modified.samplerender.SampleRender;
+import com.mobilevr.modified.samplerender.Shader;
+
+import android.content.Context;
 import android.media.Image;
-import android.opengl.GLES30;
 import android.opengl.GLSurfaceView;
 import android.opengl.Matrix;
 import android.os.Bundle;
 import android.util.Log;
-import android.view.MenuItem;
-import android.view.MotionEvent;
-import android.view.View;
-import android.widget.ImageButton;
-import android.widget.PopupMenu;
 import android.widget.Toast;
-import androidx.appcompat.app.AlertDialog;
 import androidx.appcompat.app.AppCompatActivity;
-import com.google.ar.core.Anchor;
+
 import com.google.ar.core.ArCoreApk;
-import com.google.ar.core.ArCoreApk.Availability;
 import com.google.ar.core.Camera;
+import com.google.ar.core.CameraConfig;
+import com.google.ar.core.CameraConfigFilter;
 import com.google.ar.core.Config;
-import com.google.ar.core.Config.InstantPlacementMode;
-import com.google.ar.core.DepthPoint;
 import com.google.ar.core.Frame;
-import com.google.ar.core.HitResult;
-import com.google.ar.core.InstantPlacementPoint;
-import com.google.ar.core.LightEstimate;
-import com.google.ar.core.Plane;
-import com.google.ar.core.Point;
-import com.google.ar.core.Point.OrientationMode;
-import com.google.ar.core.PointCloud;
+import com.google.ar.core.Pose;
 import com.google.ar.core.Session;
-import com.google.ar.core.Trackable;
-import com.google.ar.core.TrackingFailureReason;
 import com.google.ar.core.TrackingState;
 import com.google.ar.core.examples.java.common.helpers.CameraPermissionHelper;
 import com.google.ar.core.examples.java.common.helpers.DepthSettings;
 import com.google.ar.core.examples.java.common.helpers.DisplayRotationHelper;
 import com.google.ar.core.examples.java.common.helpers.FullScreenHelper;
-import com.google.ar.core.examples.java.common.helpers.InstantPlacementSettings;
 import com.google.ar.core.examples.java.common.helpers.SnackbarHelper;
-import com.google.ar.core.examples.java.common.helpers.TapHelper;
 import com.google.ar.core.examples.java.common.helpers.TrackingStateHelper;
-import com.google.ar.core.examples.java.common.samplerender.Framebuffer;
-import com.google.ar.core.examples.java.common.samplerender.GLError;
-import com.google.ar.core.examples.java.common.samplerender.Mesh;
-import com.google.ar.core.examples.java.common.samplerender.SampleRender;
-import com.google.ar.core.examples.java.common.samplerender.Shader;
-import com.google.ar.core.examples.java.common.samplerender.Texture;
-import com.google.ar.core.examples.java.common.samplerender.VertexBuffer;
-import com.google.ar.core.examples.java.common.samplerender.arcore.BackgroundRenderer;
-import com.google.ar.core.examples.java.common.samplerender.arcore.PlaneRenderer;
-import com.google.ar.core.examples.java.common.samplerender.arcore.SpecularCubemapFilter;
 import com.google.ar.core.exceptions.CameraNotAvailableException;
 import com.google.ar.core.exceptions.NotYetAvailableException;
 import com.google.ar.core.exceptions.UnavailableApkTooOldException;
@@ -76,150 +81,104 @@ import com.google.ar.core.exceptions.UnavailableArcoreNotInstalledException;
 import com.google.ar.core.exceptions.UnavailableDeviceNotCompatibleException;
 import com.google.ar.core.exceptions.UnavailableSdkTooOldException;
 import com.google.ar.core.exceptions.UnavailableUserDeclinedInstallationException;
+
+import com.google.mediapipe.formats.proto.LandmarkProto;
+
 import java.io.IOException;
-import java.io.InputStream;
-import java.nio.ByteBuffer;
-import java.util.ArrayList;
-import java.util.HashMap;
 import java.util.List;
 
-/**
- * This is a simple example that shows how to create an augmented reality (AR) application using the
- * ARCore API. The application will display any detected planes and will allow the user to tap on a
- * plane to place a 3D model.
- */
-public class HelloArActivity extends AppCompatActivity implements SampleRender.Renderer {
-
-  private static final String TAG = HelloArActivity.class.getSimpleName();
-
-  private static final String SEARCHING_PLANE_MESSAGE = "Searching for surfaces...";
-  private static final String WAITING_FOR_TAP_MESSAGE = "Tap on a surface to place an object.";
-
-  // See the definition of updateSphericalHarmonicsCoefficients for an explanation of these
-  // constants.
-  private static final float[] sphericalHarmonicFactors = {
-    0.282095f,
-    -0.325735f,
-    0.325735f,
-    -0.325735f,
-    0.273137f,
-    -0.273137f,
-    0.078848f,
-    -0.273137f,
-    0.136569f,
-  };
 
+public class HelloArActivity extends AppCompatActivity implements SampleRender.Renderer {
+  private static final String TAG = "mobilevr";
   private static final float Z_NEAR = 0.1f;
   private static final float Z_FAR = 100f;
 
-  private static final int CUBEMAP_RESOLUTION = 16;
-  private static final int CUBEMAP_NUMBER_OF_IMPORTANCE_SAMPLES = 32;
-
   // Rendering. The Renderers are created here, and initialized when the GL surface is created.
   private GLSurfaceView surfaceView;
-
   private boolean installRequested;
-
   private Session session;
   private final SnackbarHelper messageSnackbarHelper = new SnackbarHelper();
   private DisplayRotationHelper displayRotationHelper;
   private final TrackingStateHelper trackingStateHelper = new TrackingStateHelper(this);
-  private TapHelper tapHelper;
   private SampleRender render;
-
-  private PlaneRenderer planeRenderer;
   private BackgroundRenderer backgroundRenderer;
   private Framebuffer virtualSceneFramebuffer;
   private boolean hasSetTextureNames = false;
-
   private final DepthSettings depthSettings = new DepthSettings();
-  private boolean[] depthSettingsMenuDialogCheckboxes = new boolean[2];
-
-  private final InstantPlacementSettings instantPlacementSettings = new InstantPlacementSettings();
-  private boolean[] instantPlacementSettingsMenuDialogCheckboxes = new boolean[1];
-  // Assumed distance from the device camera to the surface on which user will try to place objects.
-  // This value affects the apparent scale of objects while the tracking method of the
-  // Instant Placement point is SCREENSPACE_WITH_APPROXIMATE_DISTANCE.
-  // Values in the [0.2, 2.0] meter range are a good choice for most AR experiences. Use lower
-  // values for AR experiences where users are expected to place objects on surfaces close to the
-  // camera. Use larger values for experiences where the user will likely be standing and trying to
-  // place an object on the ground or floor in front of them.
-  private static final float APPROXIMATE_DISTANCE_METERS = 2.0f;
-
-  // Point Cloud
-  private VertexBuffer pointCloudVertexBuffer;
-  private Mesh pointCloudMesh;
-  private Shader pointCloudShader;
-  // Keep track of the last point cloud rendered to avoid updating the VBO if point cloud
-  // was not changed.  Do this using the timestamp since we can't compare PointCloud objects.
-  private long lastPointCloudTimestamp = 0;
-
-  // Virtual object (ARCore pawn)
-  private Mesh virtualObjectMesh;
-  private Shader virtualObjectShader;
-  private Texture virtualObjectAlbedoTexture;
-  private Texture virtualObjectAlbedoInstantPlacementTexture;
-
-  private final List<WrappedAnchor> wrappedAnchors = new ArrayList<>();
-
-  // Environmental HDR
-  private Texture dfgTexture;
-  private SpecularCubemapFilter cubemapFilter;
-
-  // Temporary matrix allocated here to reduce number of allocations for each frame.
+
+  // Line
+  private VirtualObject lineObject;
+
+  // Model, view, projection, VP and MVP Matrices.
+  // FYI: Temporary matrix allocated here to reduce number of allocations for each frame.
   private final float[] modelMatrix = new float[16];
   private final float[] viewMatrix = new float[16];
   private final float[] projectionMatrix = new float[16];
-  private final float[] modelViewMatrix = new float[16]; // view x model
-  private final float[] modelViewProjectionMatrix = new float[16]; // projection x view x model
-  private final float[] sphericalHarmonicsCoefficients = new float[9 * 3];
-  private final float[] viewInverseMatrix = new float[16];
-  private final float[] worldLightDirection = {0.0f, 0.0f, 0.0f, 0.0f};
-  private final float[] viewLightDirection = new float[4]; // view x world light direction
+  private final float[] uMVPMatrix = new float[16];
+  private final float[] vPMatrix = new float[16];
+  private float x0= (float) 0.1, y0= (float) 0.1, u= (float) 0.8, v= (float) 0.4;
+
+  // Debug
+  private long time;
+  public Context nonUiContext;
+  private Boolean drawPointer, fixCamera;
+  private float[] cameraPosition = new float[3];
+
+  // Hands tracking
+  private HandsTrackingThread handsTrackingThread;
+  private float fovx, fovy;
+  private float[] fingerQuaternion;
+
+  // ======================================================================================= //
+  //                                        keep above
+  // ======================================================================================= //
 
+  // Implement your variables here
+
+  // Cube
+  private VirtualObject squareObject;
+
+  // ======================================================================================= //
+  //                                        keep below
+  // ======================================================================================= //
+
+  /**
+   * Creates the android app.
+   *
+   * @param savedInstanceState
+   */
   @Override
   protected void onCreate(Bundle savedInstanceState) {
     super.onCreate(savedInstanceState);
     setContentView(R.layout.activity_main);
     surfaceView = findViewById(R.id.surfaceview);
-    displayRotationHelper = new DisplayRotationHelper(/* context= */ this);
 
-    // Set up touch listener.
-    tapHelper = new TapHelper(/* context= */ this);
-    surfaceView.setOnTouchListener(tapHelper);
+    // Helper to measure the orientation of the device
+    displayRotationHelper = new DisplayRotationHelper(/*context=*/ this);
 
     // Set up renderer.
     render = new SampleRender(surfaceView, this, getAssets());
 
     installRequested = false;
-
+    nonUiContext = getApplicationContext();
     depthSettings.onCreate(this);
-    instantPlacementSettings.onCreate(this);
-    ImageButton settingsButton = findViewById(R.id.settings_button);
-    settingsButton.setOnClickListener(
-        new View.OnClickListener() {
-          @Override
-          public void onClick(View v) {
-            PopupMenu popup = new PopupMenu(HelloArActivity.this, v);
-            popup.setOnMenuItemClickListener(HelloArActivity.this::settingsMenuClick);
-            popup.inflate(R.menu.settings_menu);
-            popup.show();
-          }
-        });
-  }
 
-  /** Menu button to launch feature specific settings. */
-  protected boolean settingsMenuClick(MenuItem item) {
-    if (item.getItemId() == R.id.depth_settings) {
-      launchDepthSettingsMenuDialog();
-      return true;
-    } else if (item.getItemId() == R.id.instant_placement_settings) {
-      launchInstantPlacementSettingsMenuDialog();
-      return true;
+    // horizontal and vertical fov
+    // Using the phone in portrait, the y is vertical and x is horizontal.
+    fovx = 40.0f * (float) (Math.PI / 180);
+    fovy = 50.0f * (float) (Math.PI / 180);
+
+    // DEBUG PARAMETERS
+    drawPointer = true;
+    fixCamera = true;
+    if (fixCamera) {
+      cameraPosition = new float[] {0, 0, 0};
     }
-    return false;
   }
 
+  /**
+   * When the app's main thread gets killed.
+   */
   @Override
   protected void onDestroy() {
     if (session != null) {
@@ -231,22 +190,28 @@ public class HelloArActivity extends AppCompatActivity implements SampleRender.R
       session = null;
     }
 
+    // Interrupt HandsTrackingThread
+    if (handsTrackingThread != null) {
+      handsTrackingThread.interrupt();
+    }
+
     super.onDestroy();
   }
 
-  @Override
-  protected void onResume() {
-    super.onResume();
-
-    if (session == null) {
-      Exception exception = null;
-      String message = null;
-      try {
-        // Always check the latest availability.
-        Availability availability = ArCoreApk.getInstance().checkAvailability(this);
-
-        // In all other cases, try to install ARCore and handle installation failures.
-        if (availability != Availability.SUPPORTED_INSTALLED) {
+  /**
+   * Called when the app is launched, or when the user has opened another app without killing
+   * the main (ui) thread, and gets back on it.
+   * <p>
+   * Also, it creates and starts a new hands tracking thread.
+   */
+    @Override
+    protected void onResume () {
+      super.onResume();
+
+      if (session == null) {
+        Exception exception = null;
+        String message = null;
+        try {
           switch (ArCoreApk.getInstance().requestInstall(this, !installRequested)) {
             case INSTALL_REQUESTED:
               installRequested = true;
@@ -254,622 +219,530 @@ public class HelloArActivity extends AppCompatActivity implements SampleRender.R
             case INSTALLED:
               break;
           }
+
+          // ARCore requires camera permissions to operate. If we did not yet obtain runtime
+          // permission on Android M and above, now is a good time to ask the user for it.
+          if (!CameraPermissionHelper.hasCameraPermission(this)) {
+            CameraPermissionHelper.requestCameraPermission(this);
+            return;
+          }
+
+          // Create the session.
+          session = new Session(/* context= */ this);
+        } catch (UnavailableArcoreNotInstalledException
+                 | UnavailableUserDeclinedInstallationException e) {
+          message = "Please install ARCore";
+          exception = e;
+        } catch (UnavailableApkTooOldException e) {
+          message = "Please update ARCore";
+          exception = e;
+        } catch (UnavailableSdkTooOldException e) {
+          message = "Please update this app";
+          exception = e;
+        } catch (UnavailableDeviceNotCompatibleException e) {
+          message = "This device does not support AR";
+          exception = e;
+        } catch (Exception e) {
+          message = "Failed to create AR session";
+          exception = e;
         }
 
-        // ARCore requires camera permissions to operate. If we did not yet obtain runtime
-        // permission on Android M and above, now is a good time to ask the user for it.
-        if (!CameraPermissionHelper.hasCameraPermission(this)) {
-          CameraPermissionHelper.requestCameraPermission(this);
+        if (message != null) {
+          messageSnackbarHelper.showError(this, message);
+          Log.e(TAG, "Exception creating session", exception);
           return;
         }
+      }
 
-        // Create the session.
-        session = new Session(/* context= */ this);
-      } catch (UnavailableArcoreNotInstalledException
-          | UnavailableUserDeclinedInstallationException e) {
-        message = "Please install ARCore";
-        exception = e;
-      } catch (UnavailableApkTooOldException e) {
-        message = "Please update ARCore";
-        exception = e;
-      } catch (UnavailableSdkTooOldException e) {
-        message = "Please update this app";
-        exception = e;
-      } catch (UnavailableDeviceNotCompatibleException e) {
-        message = "This device does not support AR";
-        exception = e;
-      } catch (Exception e) {
-        message = "Failed to create AR session";
-        exception = e;
+      // Create and start new HandsTrackingThread
+      if (handsTrackingThread == null) {
+        new Thread(new Runnable() {
+          @Override
+          public void run() {
+            handsTrackingThread = new HandsTrackingThread(nonUiContext);
+            handsTrackingThread.start();
+            Log.i(
+                    TAG,
+                    "Starting hands tracking thread: " +
+                            Boolean.toString(handsTrackingThread.isRunning)
+            );
+          }
+        }).start();
       }
 
-      if (message != null) {
-        messageSnackbarHelper.showError(this, message);
-        Log.e(TAG, "Exception creating session", exception);
+      // Note that order matters - see the note in onPause(), the reverse applies here.
+      try {
+        configureSession();
+        // To record a live camera session for later playback, call
+        // `session.startRecording(recordingConfig)` at anytime. To playback a previously recorded AR
+        // session instead of using the live camera feed, call
+        // `session.setPlaybackDatasetUri(Uri)` before calling `session.resume()`. To
+        // learn more about recording and playback, see:
+        // https://developers.google.com/ar/develop/java/recording-and-playback
+        session.resume();
+      } catch (CameraNotAvailableException e) {
+        messageSnackbarHelper.showError(
+                this,
+                "Camera not available. Try restarting the app."
+        );
+        session = null;
         return;
       }
-    }
 
-    // Note that order matters - see the note in onPause(), the reverse applies here.
-    try {
-      configureSession();
-      // To record a live camera session for later playback, call
-      // `session.startRecording(recordingConfig)` at anytime. To playback a previously recorded AR
-      // session instead of using the live camera feed, call
-      // `session.setPlaybackDatasetUri(Uri)` before calling `session.resume()`. To
-      // learn more about recording and playback, see:
-      // https://developers.google.com/ar/develop/java/recording-and-playback
-      session.resume();
-    } catch (CameraNotAvailableException e) {
-      messageSnackbarHelper.showError(this, "Camera not available. Try restarting the app.");
-      session = null;
-      return;
+      surfaceView.onResume();
+      displayRotationHelper.onResume();
     }
 
-    surfaceView.onResume();
-    displayRotationHelper.onResume();
-  }
+    /**
+     * When the user goes on another app.
+     */
+    @Override
+    public void onPause () {
+      super.onPause();
+
+      if (session != null) {
+        // Note that the order matters - GLSurfaceView is paused first so that it does not try
+        // to query the session. If Session is paused before GLSurfaceView, GLSurfaceView may
+        // still call session.update() and get a SessionPausedException.
+        displayRotationHelper.onPause();
+        surfaceView.onPause();
+        session.pause();
+      }
 
-  @Override
-  public void onPause() {
-    super.onPause();
-    if (session != null) {
-      // Note that the order matters - GLSurfaceView is paused first so that it does not try
-      // to query the session. If Session is paused before GLSurfaceView, GLSurfaceView may
-      // still call session.update() and get a SessionPausedException.
-      displayRotationHelper.onPause();
-      surfaceView.onPause();
-      session.pause();
+      // Interrupt handsTrackingThread
+      if (handsTrackingThread != null) {
+        handsTrackingThread.interrupt();
+      }
     }
-  }
 
-  @Override
-  public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] results) {
-    super.onRequestPermissionsResult(requestCode, permissions, results);
-    if (!CameraPermissionHelper.hasCameraPermission(this)) {
-      // Use toast instead of snackbar here since the activity will exit.
-      Toast.makeText(this, "Camera permission is needed to run this application", Toast.LENGTH_LONG)
-          .show();
-      if (!CameraPermissionHelper.shouldShowRequestPermissionRationale(this)) {
-        // Permission denied with checking "Do not ask again".
-        CameraPermissionHelper.launchPermissionSettings(this);
+    /**
+     * Check if the app has camera permissions.
+     *
+     * @param requestCode
+     * @param permissions
+     * @param results
+     */
+    @Override
+    public void onRequestPermissionsResult ( int requestCode, String[] permissions,int[] results){
+      super.onRequestPermissionsResult(requestCode, permissions, results);
+      if (!CameraPermissionHelper.hasCameraPermission(this)) {
+        // Use toast instead of snackbar here since the activity will exit.
+        Toast.makeText(
+                        this,
+                        "Camera permission is needed to run this application",
+                        Toast.LENGTH_LONG)
+                .show();
+        if (!CameraPermissionHelper.shouldShowRequestPermissionRationale(this)) {
+          // Permission denied with checking "Do not ask again".
+          CameraPermissionHelper.launchPermissionSettings(this);
+        }
+        finish();
       }
-      finish();
     }
-  }
 
-  @Override
-  public void onWindowFocusChanged(boolean hasFocus) {
-    super.onWindowFocusChanged(hasFocus);
-    FullScreenHelper.setFullScreenOnWindowFocusChanged(this, hasFocus);
-  }
+    /**
+     * I don't know.
+     * Probably setting full screen.
+     *
+     * @param hasFocus
+     */
+    @Override
+    public void onWindowFocusChanged ( boolean hasFocus){
+      super.onWindowFocusChanged(hasFocus);
+      FullScreenHelper.setFullScreenOnWindowFocusChanged(this, hasFocus);
+    }
 
-  @Override
-  public void onSurfaceCreated(SampleRender render) {
-    // Prepare the rendering objects. This involves reading shaders and 3D model files, so may throw
-    // an IOException.
-    try {
-      planeRenderer = new PlaneRenderer(render);
-      backgroundRenderer = new BackgroundRenderer(render);
-      virtualSceneFramebuffer = new Framebuffer(render, /* width= */ 1, /* height= */ 1);
-
-      cubemapFilter =
-          new SpecularCubemapFilter(
-              render, CUBEMAP_RESOLUTION, CUBEMAP_NUMBER_OF_IMPORTANCE_SAMPLES);
-      // Load DFG lookup table for environmental lighting
-      dfgTexture =
-          new Texture(
-              render,
-              Texture.Target.TEXTURE_2D,
-              Texture.WrapMode.CLAMP_TO_EDGE,
-              /* useMipmaps= */ false);
-      // The dfg.raw file is a raw half-float texture with two channels.
-      final int dfgResolution = 64;
-      final int dfgChannels = 2;
-      final int halfFloatSize = 2;
-
-      ByteBuffer buffer =
-          ByteBuffer.allocateDirect(dfgResolution * dfgResolution * dfgChannels * halfFloatSize);
-      try (InputStream is = getAssets().open("models/dfg.raw")) {
-        is.read(buffer.array());
+    /**
+     * The best place to create all your objects.
+     * <p>
+     * Objects:
+     *    - Line: the pointer
+     *    - Cube
+     *
+     * @param render : the object drawing on the phone's screen.
+     */
+    @Override
+    public void onSurfaceCreated (SampleRender render){
+      // Prepare the rendering objects. This involves reading shaders and 3D model files, so may throw
+      // an IOException.
+      try {
+        // To render the image taken from the camera at the background
+        backgroundRenderer = new BackgroundRenderer(render);
+        virtualSceneFramebuffer = new Framebuffer(render, /*width=*/ 1, /*height=*/ 1);
+
+        // LINE object init: this is the pointer
+        float[] lineCoords = {
+                // Front face
+                -0.005f, -0.005f, 10.0f,
+                0.005f, -0.005f, 10.0f,
+                0.005f, 0.005f, 10.0f,
+                -0.005f, 0.005f, 10.0f,
+
+                // Back face
+                -0.005f, -0.005f, -10.0f,
+                0.005f, -0.005f, -10.0f,
+                0.005f, 0.005f, -10.0f,
+                -0.005f, 0.005f, -10.0f
+        };
+        int[] lineIndex = {
+                // Front face
+                0, 1, 2,
+                0, 2, 3,
+
+                // Back face
+                4, 6, 5,
+                4, 7, 6,
+
+                // Left face
+                4, 5, 1,
+                4, 1, 0,
+
+                // Right face
+                3, 2, 6,
+                3, 6, 7,
+
+                // Top face
+                1, 5, 6,
+                1, 6, 2,
+
+                // Bottom face
+                4, 0, 3,
+                4, 3, 7
+        };
+        int COORDS_PER_VERTEX = 3;
+        String vertexShaderFileName = "shaders/simpleShader.vert";
+        String fragmentShaderFileName = "shaders/simpleShader.frag";
+        String mode = "simple";
+        lineObject = new VirtualObject(
+                render,
+                COORDS_PER_VERTEX,
+                lineCoords,
+                lineIndex,
+                vertexShaderFileName,
+                fragmentShaderFileName,
+                null,
+                mode);
+
+        // ======================================================================================= //
+        //                                        keep above
+        // ======================================================================================= //
+
+        // Implement the objects of your game here.
+
+        // square Texture init
+        Texture squareTexture = Texture.createFromAsset(
+                render,
+                "images/rabbit.png",
+                Texture.WrapMode.CLAMP_TO_EDGE,
+                Texture.ColorFormat.SRGB);
+
+        // square object init
+        float[] squareCoords = { // counterclock order
+                // Front face
+                -0.4f, -0.2f, -2.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f,
+                -0.4f, 0.4f, -2.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f,
+                0.4f, 0.4f, -2.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f,
+                0.4f, -0.2f, -2.0f, 0.0f, 0.0f, 0.0f, 1.0f, 1.0f
+        };
+        int[] squareIndex = {
+                // Front face
+                0, 1, 2,
+                0, 2, 3
+        };
+        COORDS_PER_VERTEX = 8; // 3 for position, 3 for color, 2 for texture coordinates
+        vertexShaderFileName = "shaders/textureShader.vert";
+        fragmentShaderFileName = "shaders/textureShader.frag";
+        mode = "texture";
+        squareObject = new VirtualObject(
+                render,
+                COORDS_PER_VERTEX,
+                squareCoords,
+                squareIndex,
+                vertexShaderFileName,
+                fragmentShaderFileName,
+                null,
+                mode);
+
+        // Setting the Texture to the object
+        squareObject.shader.setTexture("ourTexture", squareTexture);
+
+
+        // ======================================================================================= //
+        //                                        keep below
+        // ======================================================================================= //
+
+
+      } catch (IOException e) {
+        Log.e(TAG, "Failed to read a required asset file", e);
+        messageSnackbarHelper.showError(
+                this,
+                "Failed to read a required asset file: " + e
+        );
       }
-      // SampleRender abstraction leaks here.
-      GLES30.glBindTexture(GLES30.GL_TEXTURE_2D, dfgTexture.getTextureId());
-      GLError.maybeThrowGLException("Failed to bind DFG texture", "glBindTexture");
-      GLES30.glTexImage2D(
-          GLES30.GL_TEXTURE_2D,
-          /* level= */ 0,
-          GLES30.GL_RG16F,
-          /* width= */ dfgResolution,
-          /* height= */ dfgResolution,
-          /* border= */ 0,
-          GLES30.GL_RG,
-          GLES30.GL_HALF_FLOAT,
-          buffer);
-      GLError.maybeThrowGLException("Failed to populate DFG texture", "glTexImage2D");
-
-      // Point cloud
-      pointCloudShader =
-          Shader.createFromAssets(
-                  render,
-                  "shaders/point_cloud.vert",
-                  "shaders/point_cloud.frag",
-                  /* defines= */ null)
-              .setVec4(
-                  "u_Color", new float[] {31.0f / 255.0f, 188.0f / 255.0f, 210.0f / 255.0f, 1.0f})
-              .setFloat("u_PointSize", 5.0f);
-      // four entries per vertex: X, Y, Z, confidence
-      pointCloudVertexBuffer =
-          new VertexBuffer(render, /* numberOfEntriesPerVertex= */ 4, /* entries= */ null);
-      final VertexBuffer[] pointCloudVertexBuffers = {pointCloudVertexBuffer};
-      pointCloudMesh =
-          new Mesh(
-              render, Mesh.PrimitiveMode.POINTS, /* indexBuffer= */ null, pointCloudVertexBuffers);
-
-      // Virtual object to render (ARCore pawn)
-      virtualObjectAlbedoTexture =
-          Texture.createFromAsset(
-              render,
-              "models/pawn_albedo.png",
-              Texture.WrapMode.CLAMP_TO_EDGE,
-              Texture.ColorFormat.SRGB);
-      virtualObjectAlbedoInstantPlacementTexture =
-          Texture.createFromAsset(
-              render,
-              "models/pawn_albedo_instant_placement.png",
-              Texture.WrapMode.CLAMP_TO_EDGE,
-              Texture.ColorFormat.SRGB);
-      Texture virtualObjectPbrTexture =
-          Texture.createFromAsset(
-              render,
-              "models/pawn_roughness_metallic_ao.png",
-              Texture.WrapMode.CLAMP_TO_EDGE,
-              Texture.ColorFormat.LINEAR);
-
-      virtualObjectMesh = Mesh.createFromAsset(render, "models/pawn.obj");
-      virtualObjectShader =
-          Shader.createFromAssets(
-                  render,
-                  "shaders/environmental_hdr.vert",
-                  "shaders/environmental_hdr.frag",
-                  /* defines= */ new HashMap<String, String>() {
-                    {
-                      put(
-                          "NUMBER_OF_MIPMAP_LEVELS",
-                          Integer.toString(cubemapFilter.getNumberOfMipmapLevels()));
-                    }
-                  })
-              .setTexture("u_AlbedoTexture", virtualObjectAlbedoTexture)
-              .setTexture("u_RoughnessMetallicAmbientOcclusionTexture", virtualObjectPbrTexture)
-              .setTexture("u_Cubemap", cubemapFilter.getFilteredCubemapTexture())
-              .setTexture("u_DfgTexture", dfgTexture);
-    } catch (IOException e) {
-      Log.e(TAG, "Failed to read a required asset file", e);
-      messageSnackbarHelper.showError(this, "Failed to read a required asset file: " + e);
     }
-  }
 
-  @Override
-  public void onSurfaceChanged(SampleRender render, int width, int height) {
-    displayRotationHelper.onSurfaceChanged(width, height);
-    virtualSceneFramebuffer.resize(width, height);
-  }
-
-  @Override
-  public void onDrawFrame(SampleRender render) {
-    if (session == null) {
-      return;
+    /**
+     * Resize the image displayed.
+     *
+     * @param render
+     * @param width
+     * @param height
+     */
+    @Override
+    public void onSurfaceChanged (SampleRender render,int width, int height){
+      int myHeight = (int) Math.floor(height / 2.0);
+      displayRotationHelper.onSurfaceChanged(width, myHeight);
+      // why only the virtual and not also the window scene?
+      virtualSceneFramebuffer.resize(width, height);
     }
 
-    // Texture names should only be set once on a GL thread unless they change. This is done during
-    // onDrawFrame rather than onSurfaceCreated since the session is not guaranteed to have been
-    // initialized during the execution of onSurfaceCreated.
-    if (!hasSetTextureNames) {
-      session.setCameraTextureNames(
-          new int[] {backgroundRenderer.getCameraColorTexture().getTextureId()});
-      hasSetTextureNames = true;
-    }
+    /**
+     * Draws the objects defined in onSurfaceCreated() on the 2D screen.
+     *
+     * @param render: (SampleRender)
+     */
+    @Override
+    public void onDrawFrame (SampleRender render){
+      if (session == null) {
+        return;
+      }
 
-    // -- Update per-frame state
-
-    // Notify ARCore session that the view size changed so that the perspective matrix and
-    // the video background can be properly adjusted.
-    displayRotationHelper.updateSessionIfNeeded(session);
-
-    // Obtain the current frame from the AR Session. When the configuration is set to
-    // UpdateMode.BLOCKING (it is by default), this will throttle the rendering to the
-    // camera framerate.
-    Frame frame;
-    try {
-      frame = session.update();
-    } catch (CameraNotAvailableException e) {
-      Log.e(TAG, "Camera not available during onDrawFrame", e);
-      messageSnackbarHelper.showError(this, "Camera not available. Try restarting the app.");
-      return;
-    }
-    Camera camera = frame.getCamera();
-
-    // Update BackgroundRenderer state to match the depth settings.
-    try {
-      backgroundRenderer.setUseDepthVisualization(
-          render, depthSettings.depthColorVisualizationEnabled());
-      backgroundRenderer.setUseOcclusion(render, depthSettings.useDepthForOcclusion());
-    } catch (IOException e) {
-      Log.e(TAG, "Failed to read a required asset file", e);
-      messageSnackbarHelper.showError(this, "Failed to read a required asset file: " + e);
-      return;
-    }
-    // BackgroundRenderer.updateDisplayGeometry must be called every frame to update the coordinates
-    // used to draw the background camera image.
-    backgroundRenderer.updateDisplayGeometry(frame);
-
-    if (camera.getTrackingState() == TrackingState.TRACKING
-        && (depthSettings.useDepthForOcclusion()
-            || depthSettings.depthColorVisualizationEnabled())) {
-      try (Image depthImage = frame.acquireDepthImage16Bits()) {
-        backgroundRenderer.updateCameraDepthTexture(depthImage);
-      } catch (NotYetAvailableException e) {
-        // This normally means that depth data is not available yet. This is normal so we will not
-        // spam the logcat with this.
+      // Texture names should only be set once on a GL thread unless they change. This is done during
+      // onDrawFrame rather than onSurfaceCreated since the session is not guaranteed to have been
+      // initialized during the execution of onSurfaceCreated.
+      if (!hasSetTextureNames) {
+        session.setCameraTextureNames(
+                new int[]{backgroundRenderer.getCameraColorTexture().getTextureId()});
+        hasSetTextureNames = true;
       }
-    }
 
-    // Handle one tap per frame.
-    handleTap(frame, camera);
+      // -- Update per-frame state
 
-    // Keep the screen unlocked while tracking, but allow it to lock when tracking stops.
-    trackingStateHelper.updateKeepScreenOnFlag(camera.getTrackingState());
+      // Notify ARCore session that the view size changed so that the perspective matrix and
+      // the video background can be properly adjusted.
+      displayRotationHelper.updateSessionIfNeeded(session);
 
-    // Show a message based on whether tracking has failed, if planes are detected, and if the user
-    // has placed any objects.
-    String message = null;
-    if (camera.getTrackingState() == TrackingState.PAUSED) {
-      if (camera.getTrackingFailureReason() == TrackingFailureReason.NONE) {
-        message = SEARCHING_PLANE_MESSAGE;
+      // Obtain the current frame from ARSession. When the configuration is set to
+      // UpdateMode.BLOCKING (it is by default), this will throttle the rendering to the
+      // camera framerate.
+      Frame frame;
+      try {
+        frame = session.update();
+      } catch (CameraNotAvailableException e) {
+        Log.e(TAG, "Camera not available during onDrawFrame", e);
+        messageSnackbarHelper.showError(
+                this,
+                "Camera not available. Try restarting the app."
+        );
+        return;
+      }
+      Camera camera = frame.getCamera();
+      // Get the cameraPose
+      // Note: in versions < 1.5: physical camera: opens in landscape (90° from portrait
+      //       according to -Z axis)
+      Pose cameraPose = camera.getPose();
+      if (fixCamera) {
+        cameraPose = new Pose(cameraPosition, camera.getPose().getRotationQuaternion());
       } else {
-        message = TrackingStateHelper.getTrackingFailureReasonString(camera);
+        cameraPosition = new float[]{
+                cameraPose.tx(),
+                cameraPose.ty(),
+                cameraPose.tz()
+        };
       }
-    } else if (hasTrackingPlane()) {
-      if (wrappedAnchors.isEmpty()) {
-        message = WAITING_FOR_TAP_MESSAGE;
+
+      // Update BackgroundRenderer state to match the depth settings.
+      try {
+        backgroundRenderer.setUseDepthVisualization(
+                render, depthSettings.depthColorVisualizationEnabled());
+        backgroundRenderer.setUseOcclusion(render, depthSettings.useDepthForOcclusion());
+      } catch (IOException e) {
+        Log.e(TAG, "Failed to read a required asset file", e);
+        messageSnackbarHelper.showError(
+                this,
+                "Failed to read a required asset file: " + e
+        );
+        return;
+      }
+      // BackgroundRenderer.updateDisplayGeometry must be called every frame to update the coordinates
+      // used to draw the background camera image.
+      backgroundRenderer.updateDisplayGeometry(frame);
+
+      if (camera.getTrackingState() == TrackingState.TRACKING
+              && (depthSettings.useDepthForOcclusion()
+              || depthSettings.depthColorVisualizationEnabled())) { // Never true?
+        try (Image depthImage = frame.acquireCameraImage()) {
+          backgroundRenderer.updateCameraDepthTexture(depthImage);
+
+        } catch (NotYetAvailableException e) {
+          // This normally means that depth data is not available yet. This is normal so we will not
+          // spam the logcat with this.
+        }
       }
-    } else {
-      message = SEARCHING_PLANE_MESSAGE;
-    }
-    if (message == null) {
-      messageSnackbarHelper.hide(this);
-    } else {
-      messageSnackbarHelper.showMessage(this, message);
-    }
 
-    // -- Draw background
+      // Keep the screen unlocked while tracking, but allow it to lock when tracking stops.
+      trackingStateHelper.updateKeepScreenOnFlag(camera.getTrackingState());
 
-    if (frame.getTimestamp() != 0) {
-      // Suppress rendering if the camera did not produce the first frame yet. This is to avoid
-      // drawing possible leftover data from previous sessions if the texture is reused.
-      backgroundRenderer.drawBackground(render);
-    }
+      // -- Draw background
+      if (frame.getTimestamp() != 0) {
+        // Suppress rendering if the camera did not produce the first frame yet. This is to avoid
+        // drawing possible leftover data from previous sessions if the texture is reused.
+        backgroundRenderer.drawBackground(render, x0, y0, u, v); // THIS DRAWS THE IMAGE ON
+                                                                 // THE BACKGROUND
+      }
 
-    // If not tracking, don't draw 3D objects.
-    if (camera.getTrackingState() == TrackingState.PAUSED) {
-      return;
-    }
+      // If not tracking, don't draw 3D objects.
+      if (camera.getTrackingState() == TrackingState.PAUSED) {
+        return;
+      }
+
+      // Get projection matrix.
+      camera.getProjectionMatrix(projectionMatrix, 0, Z_NEAR, Z_FAR);
+
+      // Get camera matrix and draw.
+    /*
+        | 1 0 0 -eye_x |
+        | 0 1 0 -eye_y |
+        | 0 0 1 -eye_z |
+        | 0 0 0    1   |
+     */
+      camera.getViewMatrix(viewMatrix, 0);
+
+      // Fix camera - necessary since the Android 13 from my phone breaks the sensors calibration
+      if (fixCamera) {
+        viewMatrix[12] = -cameraPosition[0];
+        viewMatrix[13] = -cameraPosition[1];
+        viewMatrix[14] = -cameraPosition[2];
+      }
 
-    // -- Draw non-occluded virtual objects (planes, point cloud)
+      // create the Projection-View matrix
+      Matrix.multiplyMM(vPMatrix, 0, projectionMatrix, 0, viewMatrix, 0);
 
-    // Get projection matrix.
-    camera.getProjectionMatrix(projectionMatrix, 0, Z_NEAR, Z_FAR);
+      // Clear the screen before drawing the next frame
+      render.clear(virtualSceneFramebuffer, 0f, 0f, 0f, 0f, 2, x0, y0, u, v);
 
-    // Get camera matrix and draw.
-    camera.getViewMatrix(viewMatrix, 0);
 
-    // Visualize tracked points.
-    // Use try-with-resources to automatically release the point cloud.
-    try (PointCloud pointCloud = frame.acquirePointCloud()) {
-      if (pointCloud.getTimestamp() > lastPointCloudTimestamp) {
-        pointCloudVertexBuffer.set(pointCloud.getPoints());
-        lastPointCloudTimestamp = pointCloud.getTimestamp();
+      // Get landmarkList
+      List<LandmarkProto.NormalizedLandmark> landmarkList = null;
+      if (handsTrackingThread != null) {
+        landmarkList = handsTrackingThread.getLandmarkList();
       }
-      Matrix.multiplyMM(modelViewProjectionMatrix, 0, projectionMatrix, 0, viewMatrix, 0);
-      pointCloudShader.setMat4("u_ModelViewProjection", modelViewProjectionMatrix);
-      render.draw(pointCloudMesh, pointCloudShader);
-    }
 
-    // Visualize planes.
-    planeRenderer.drawPlanes(
-        render,
-        session.getAllTrackables(Plane.class),
-        camera.getDisplayOrientedPose(),
-        projectionMatrix);
-
-    // -- Draw occluded virtual objects
-
-    // Update lighting parameters in the shader
-    updateLightEstimation(frame.getLightEstimate(), viewMatrix);
-
-    // Visualize anchors created by touch.
-    render.clear(virtualSceneFramebuffer, 0f, 0f, 0f, 0f);
-    for (WrappedAnchor wrappedAnchor : wrappedAnchors) {
-      Anchor anchor = wrappedAnchor.getAnchor();
-      Trackable trackable = wrappedAnchor.getTrackable();
-      if (anchor.getTrackingState() != TrackingState.TRACKING) {
-        continue;
+
+      // Get fingerQuaternion
+      if (landmarkList != null) {
+        fingerQuaternion = getFingerQuaternion(cameraPose, landmarkList, fovx, fovy);
+      } else {
+        fingerQuaternion = null;
       }
 
-      // Get the current pose of an Anchor in world space. The Anchor pose is updated
-      // during calls to session.update() as ARCore refines its estimate of the world.
-      anchor.getPose().toMatrix(modelMatrix, 0);
+      // ========================================================================================= //
+      //                                        keep above
+      // ========================================================================================= //
 
-      // Calculate model/view/projection matrices
-      Matrix.multiplyMM(modelViewMatrix, 0, viewMatrix, 0, modelMatrix, 0);
-      Matrix.multiplyMM(modelViewProjectionMatrix, 0, projectionMatrix, 0, modelViewMatrix, 0);
+      // Implement the drawing behavior of your game here.
 
-      // Update shader properties and draw
-      virtualObjectShader.setMat4("u_ModelView", modelViewMatrix);
-      virtualObjectShader.setMat4("u_ModelViewProjection", modelViewProjectionMatrix);
+      // DRAW SQUARE
+      // applying transformations:
+      Matrix.setIdentityM(modelMatrix, 0);
+      //Matrix.translateM(modelMatrix, 0, 0.0f, 0.0f, 0.0f);
+      //Matrix.scaleM(modelMatrix, 0, 1.5f, 1.5f, 1.5f);
+      //Matrix.rotateM(modelMatrix, 0, -45f, 0, 0, -1.0f);
+      Matrix.multiplyMM(uMVPMatrix, 0, vPMatrix, 0, modelMatrix, 0);
 
-      if (trackable instanceof InstantPlacementPoint
-          && ((InstantPlacementPoint) trackable).getTrackingMethod()
-              == InstantPlacementPoint.TrackingMethod.SCREENSPACE_WITH_APPROXIMATE_DISTANCE) {
-        virtualObjectShader.setTexture(
-            "u_AlbedoTexture", virtualObjectAlbedoInstantPlacementTexture);
-      } else {
-        virtualObjectShader.setTexture("u_AlbedoTexture", virtualObjectAlbedoTexture);
-      }
+      // Setting the position, scale and orientation to the square
+      squareObject.shader.setMat4("uMVPMatrix", uMVPMatrix);
+
+      // drawing the square
+      render.draw(squareObject.mesh, squareObject.shader, virtualSceneFramebuffer, 0, x0, y0, u, v);
+      render.draw(squareObject.mesh, squareObject.shader, virtualSceneFramebuffer, 1, x0, y0, u, v);
 
-      render.draw(virtualObjectMesh, virtualObjectShader, virtualSceneFramebuffer);
-    }
 
-    // Compose the virtual scene with the background.
-    backgroundRenderer.drawVirtualScene(render, virtualSceneFramebuffer, Z_NEAR, Z_FAR);
-  }
 
-  // Handle only one tap per frame, as taps are usually low frequency compared to frame rate.
-  private void handleTap(Frame frame, Camera camera) {
-    MotionEvent tap = tapHelper.poll();
-    if (tap != null && camera.getTrackingState() == TrackingState.TRACKING) {
-      List<HitResult> hitResultList;
-      if (instantPlacementSettings.isInstantPlacementEnabled()) {
-        hitResultList =
-            frame.hitTestInstantPlacement(tap.getX(), tap.getY(), APPROXIMATE_DISTANCE_METERS);
-      } else {
-        hitResultList = frame.hitTest(tap);
-      }
-      for (HitResult hit : hitResultList) {
-        // If any plane, Oriented Point, or Instant Placement Point was hit, create an anchor.
-        Trackable trackable = hit.getTrackable();
-        // If a plane was hit, check that it was hit inside the plane polygon.
-        // DepthPoints are only returned if Config.DepthMode is set to AUTOMATIC.
-        if ((trackable instanceof Plane
-                && ((Plane) trackable).isPoseInPolygon(hit.getHitPose())
-                && (PlaneRenderer.calculateDistanceToPlane(hit.getHitPose(), camera.getPose()) > 0))
-            || (trackable instanceof Point
-                && ((Point) trackable).getOrientationMode()
-                    == OrientationMode.ESTIMATED_SURFACE_NORMAL)
-            || (trackable instanceof InstantPlacementPoint)
-            || (trackable instanceof DepthPoint)) {
-          // Cap the number of objects created. This avoids overloading both the
-          // rendering system and ARCore.
-          if (wrappedAnchors.size() >= 20) {
-            wrappedAnchors.get(0).getAnchor().detach();
-            wrappedAnchors.remove(0);
-          }
 
-          // Adding an Anchor tells ARCore that it should track this position in
-          // space. This anchor is created on the Plane to place the 3D model
-          // in the correct position relative both to the world and to the plane.
-          wrappedAnchors.add(new WrappedAnchor(hit.createAnchor(), trackable));
-          // For devices that support the Depth API, shows a dialog to suggest enabling
-          // depth-based occlusion. This dialog needs to be spawned on the UI thread.
-          this.runOnUiThread(this::showOcclusionDialogIfNeeded);
-
-          // Hits are sorted by depth. Consider only closest hit on a plane, Oriented Point, or
-          // Instant Placement Point.
-          break;
+      // ========================================================================================= //
+      //                                        keep below
+      // ========================================================================================= //
+
+      // If the pointer is wanted to be drawn
+      if (drawPointer && fingerQuaternion != null) {
+
+        float[] pointerPosition;
+
+        if (fixCamera) {
+          pointerPosition = new float[]{0, 0, 0};
+        } else {
+          pointerPosition = new float[]{
+                  cameraPose.tx(),
+                  cameraPose.ty(),
+                  cameraPose.tz()
+          };
         }
-      }
-    }
-  }
 
-  /**
-   * Shows a pop-up dialog on the first call, determining whether the user wants to enable
-   * depth-based occlusion. The result of this dialog can be retrieved with useDepthForOcclusion().
-   */
-  private void showOcclusionDialogIfNeeded() {
-    boolean isDepthSupported = session.isDepthModeSupported(Config.DepthMode.AUTOMATIC);
-    if (!depthSettings.shouldShowDepthEnableDialog() || !isDepthSupported) {
-      return; // Don't need to show dialog.
-    }
+        // DRAW Line which is the pointer
 
-    // Asks the user whether they want to use depth-based occlusion.
-    new AlertDialog.Builder(this)
-        .setTitle(R.string.options_title_with_depth)
-        .setMessage(R.string.depth_use_explanation)
-        .setPositiveButton(
-            R.string.button_text_enable_depth,
-            (DialogInterface dialog, int which) -> {
-              depthSettings.setUseDepthForOcclusion(true);
-            })
-        .setNegativeButton(
-            R.string.button_text_disable_depth,
-            (DialogInterface dialog, int which) -> {
-              depthSettings.setUseDepthForOcclusion(false);
-            })
-        .show();
-  }
+        // applying transformations:
+        Matrix.setIdentityM(modelMatrix, 0);
+        Matrix.translateM(modelMatrix, 0, pointerPosition[0],
+                pointerPosition[1],
+                pointerPosition[2]);
+        Matrix.scaleM(modelMatrix, 0, 0.1f, 0.1f, 0.1f);
 
-  private void launchInstantPlacementSettingsMenuDialog() {
-    resetSettingsMenuDialogCheckboxes();
-    Resources resources = getResources();
-    new AlertDialog.Builder(this)
-        .setTitle(R.string.options_title_instant_placement)
-        .setMultiChoiceItems(
-            resources.getStringArray(R.array.instant_placement_options_array),
-            instantPlacementSettingsMenuDialogCheckboxes,
-            (DialogInterface dialog, int which, boolean isChecked) ->
-                instantPlacementSettingsMenuDialogCheckboxes[which] = isChecked)
-        .setPositiveButton(
-            R.string.done,
-            (DialogInterface dialogInterface, int which) -> applySettingsMenuDialogCheckboxes())
-        .setNegativeButton(
-            android.R.string.cancel,
-            (DialogInterface dialog, int which) -> resetSettingsMenuDialogCheckboxes())
-        .show();
-  }
+        // Convert the quaternion to a rotation matrix
+        float[] rotationMatrix = quaternionToMatrix(fingerQuaternion);
 
-  /** Shows checkboxes to the user to facilitate toggling of depth-based effects. */
-  private void launchDepthSettingsMenuDialog() {
-    // Retrieves the current settings to show in the checkboxes.
-    resetSettingsMenuDialogCheckboxes();
-
-    // Shows the dialog to the user.
-    Resources resources = getResources();
-    if (session.isDepthModeSupported(Config.DepthMode.AUTOMATIC)) {
-      // With depth support, the user can select visualization options.
-      new AlertDialog.Builder(this)
-          .setTitle(R.string.options_title_with_depth)
-          .setMultiChoiceItems(
-              resources.getStringArray(R.array.depth_options_array),
-              depthSettingsMenuDialogCheckboxes,
-              (DialogInterface dialog, int which, boolean isChecked) ->
-                  depthSettingsMenuDialogCheckboxes[which] = isChecked)
-          .setPositiveButton(
-              R.string.done,
-              (DialogInterface dialogInterface, int which) -> applySettingsMenuDialogCheckboxes())
-          .setNegativeButton(
-              android.R.string.cancel,
-              (DialogInterface dialog, int which) -> resetSettingsMenuDialogCheckboxes())
-          .show();
-    } else {
-      // Without depth support, no settings are available.
-      new AlertDialog.Builder(this)
-          .setTitle(R.string.options_title_without_depth)
-          .setPositiveButton(
-              R.string.done,
-              (DialogInterface dialogInterface, int which) -> applySettingsMenuDialogCheckboxes())
-          .show();
-    }
-  }
+        // Apply the rotation matrix to your model matrix
+        Matrix.multiplyMM(modelMatrix, 0, modelMatrix, 0, rotationMatrix, 0);
+        Matrix.multiplyMM(uMVPMatrix, 0, vPMatrix, 0, modelMatrix, 0);
 
-  private void applySettingsMenuDialogCheckboxes() {
-    depthSettings.setUseDepthForOcclusion(depthSettingsMenuDialogCheckboxes[0]);
-    depthSettings.setDepthColorVisualizationEnabled(depthSettingsMenuDialogCheckboxes[1]);
-    instantPlacementSettings.setInstantPlacementEnabled(
-        instantPlacementSettingsMenuDialogCheckboxes[0]);
-    configureSession();
-  }
+        // setting the color
+        lineObject.shader.setVec4("vColor", new float[]{0.63671875f, 0.76953125f, 0.22265625f, 1.0f});
 
-  private void resetSettingsMenuDialogCheckboxes() {
-    depthSettingsMenuDialogCheckboxes[0] = depthSettings.useDepthForOcclusion();
-    depthSettingsMenuDialogCheckboxes[1] = depthSettings.depthColorVisualizationEnabled();
-    instantPlacementSettingsMenuDialogCheckboxes[0] =
-        instantPlacementSettings.isInstantPlacementEnabled();
-  }
+        // Setting the position, scale and orientation to the square
+        lineObject.shader.setMat4("uMVPMatrix", uMVPMatrix);
 
-  /** Checks if we detected at least one plane. */
-  private boolean hasTrackingPlane() {
-    for (Plane plane : session.getAllTrackables(Plane.class)) {
-      if (plane.getTrackingState() == TrackingState.TRACKING) {
-        return true;
+        // drawing the line
+        render.draw(lineObject.mesh, lineObject.shader, virtualSceneFramebuffer, 0, x0, y0, u, v);
+        render.draw(lineObject.mesh, lineObject.shader, virtualSceneFramebuffer, 1, x0, y0, u, v);
       }
-    }
-    return false;
-  }
 
-  /** Update state based on the current frame's light estimation. */
-  private void updateLightEstimation(LightEstimate lightEstimate, float[] viewMatrix) {
-    if (lightEstimate.getState() != LightEstimate.State.VALID) {
-      virtualObjectShader.setBool("u_LightEstimateIsValid", false);
-      return;
-    }
-    virtualObjectShader.setBool("u_LightEstimateIsValid", true);
-
-    Matrix.invertM(viewInverseMatrix, 0, viewMatrix, 0);
-    virtualObjectShader.setMat4("u_ViewInverse", viewInverseMatrix);
-
-    updateMainLight(
-        lightEstimate.getEnvironmentalHdrMainLightDirection(),
-        lightEstimate.getEnvironmentalHdrMainLightIntensity(),
-        viewMatrix);
-    updateSphericalHarmonicsCoefficients(
-        lightEstimate.getEnvironmentalHdrAmbientSphericalHarmonics());
-    cubemapFilter.update(lightEstimate.acquireEnvironmentalHdrCubeMap());
-  }
+      // Compose the virtual scene with the background. i.e. Draw the virtual scene
+      backgroundRenderer.drawVirtualScene(render, virtualSceneFramebuffer, Z_NEAR, Z_FAR, x0, y0, u, v);
 
-  private void updateMainLight(float[] direction, float[] intensity, float[] viewMatrix) {
-    // We need the direction in a vec4 with 0.0 as the final component to transform it to view space
-    worldLightDirection[0] = direction[0];
-    worldLightDirection[1] = direction[1];
-    worldLightDirection[2] = direction[2];
-    Matrix.multiplyMV(viewLightDirection, 0, viewMatrix, 0, worldLightDirection, 0);
-    virtualObjectShader.setVec4("u_ViewLightDirection", viewLightDirection);
-    virtualObjectShader.setVec3("u_LightIntensity", intensity);
-  }
+      // Set a new image every 0ms to handsTrackingThread
+      if (System.currentTimeMillis() - time > 0) {
 
-  private void updateSphericalHarmonicsCoefficients(float[] coefficients) {
-    // Pre-multiply the spherical harmonics coefficients before passing them to the shader. The
-    // constants in sphericalHarmonicFactors were derived from three terms:
-    //
-    // 1. The normalized spherical harmonics basis functions (y_lm)
-    //
-    // 2. The lambertian diffuse BRDF factor (1/pi)
-    //
-    // 3. A <cos> convolution. This is done to so that the resulting function outputs the irradiance
-    // of all incoming light over a hemisphere for a given surface normal, which is what the shader
-    // (environmental_hdr.frag) expects.
-    //
-    // You can read more details about the math here:
-    // https://google.github.io/filament/Filament.html#annex/sphericalharmonics
-
-    if (coefficients.length != 9 * 3) {
-      throw new IllegalArgumentException(
-          "The given coefficients array must be of length 27 (3 components per 9 coefficients");
-    }
-
-    // Apply each factor to every component of each coefficient
-    for (int i = 0; i < 9 * 3; ++i) {
-      sphericalHarmonicsCoefficients[i] = coefficients[i] * sphericalHarmonicFactors[i / 3];
+        // Set camera image for the other thread
+        try (Image cameraImage = frame.acquireCameraImage()) {
+          if (handsTrackingThread != null) {
+            handsTrackingThread.setCameraImage(cameraImage);
+          }
+        } catch (NotYetAvailableException e) {
+          // This normally means that depth data is not available yet. This is normal so we will not
+          // spam the logcat with this.
+        }
+        time = System.currentTimeMillis();
+      }
     }
-    virtualObjectShader.setVec3Array(
-        "u_SphericalHarmonicsCoefficients", sphericalHarmonicsCoefficients);
-  }
 
-  /** Configures the session with feature settings. */
-  private void configureSession() {
-    Config config = session.getConfig();
-    config.setLightEstimationMode(Config.LightEstimationMode.ENVIRONMENTAL_HDR);
-    if (session.isDepthModeSupported(Config.DepthMode.AUTOMATIC)) {
-      config.setDepthMode(Config.DepthMode.AUTOMATIC);
-    } else {
-      config.setDepthMode(Config.DepthMode.DISABLED);
-    }
-    if (instantPlacementSettings.isInstantPlacementEnabled()) {
-      config.setInstantPlacementMode(InstantPlacementMode.LOCAL_Y_UP);
-    } else {
-      config.setInstantPlacementMode(InstantPlacementMode.DISABLED);
+    /**
+     * Configures the session with feature settings.
+     */
+    private void configureSession () {
+      Config config = session.getConfig();
+      config.setLightEstimationMode(Config.LightEstimationMode.ENVIRONMENTAL_HDR);
+      if (session.isDepthModeSupported(Config.DepthMode.AUTOMATIC)) {
+        config.setDepthMode(Config.DepthMode.AUTOMATIC);
+      } else {
+        config.setDepthMode(Config.DepthMode.DISABLED);
+      }
+      List<CameraConfig> cameraConfigList = session.
+              getSupportedCameraConfigs(new CameraConfigFilter(session));
+      for (int i = 0; i < cameraConfigList.size(); i++) {
+        //Log.i(TAG, "i = " + i + ": " + cameraConfigList.get(i).getFpsRange().toString());
+      }
+      //session.setCameraConfig(cameraConfig);
+      session.configure(config);
     }
-    session.configure(config);
-  }
 }
 
-/**
- * Associates an Anchor with the trackable it was attached to. This is used to be able to check
- * whether or not an Anchor originally was attached to an {@link InstantPlacementPoint}.
- */
-class WrappedAnchor {
-  private Anchor anchor;
-  private Trackable trackable;
-
-  public WrappedAnchor(Anchor anchor, Trackable trackable) {
-    this.anchor = anchor;
-    this.trackable = trackable;
-  }
-
-  public Anchor getAnchor() {
-    return anchor;
-  }
-
-  public Trackable getTrackable() {
-    return trackable;
-  }
-}
