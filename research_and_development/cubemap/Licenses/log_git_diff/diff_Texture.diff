diff --git "a/C:\\Users\\loicg\\Documents\\checkfilesdiff\\hello_ar_java-1.41.0\\hello_ar_java\\app\\src\\main\\java\\com\\google\\ar\\core\\examples\\java\\common\\samplerender\\Texture.java" "b/C:\\Users\\loicg\\Documents\\checkfilesdiff\\cubemap\\app\\src\\main\\java\\com\\mobilevr\\modified\\samplerender\\Texture.java"
index acb243c..414ae5f 100644
--- "a/C:\\Users\\loicg\\Documents\\checkfilesdiff\\hello_ar_java-1.41.0\\hello_ar_java\\app\\src\\main\\java\\com\\google\\ar\\core\\examples\\java\\common\\samplerender\\Texture.java"
+++ "b/C:\\Users\\loicg\\Documents\\checkfilesdiff\\cubemap\\app\\src\\main\\java\\com\\mobilevr\\modified\\samplerender\\Texture.java"
@@ -13,13 +13,34 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.google.ar.core.examples.java.common.samplerender;
+
+/*
+ * Copyright 2024 MasterHansCoding (GitHub)
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ * Get the detailed modifications in "Licenses/log_git_diff/diff_Texture.diff"
+ * at root of this app.
+ */
+package com.mobilevr.modified.samplerender;
 
 import android.graphics.Bitmap;
 import android.graphics.BitmapFactory;
+import android.graphics.Matrix;
 import android.opengl.GLES11Ext;
 import android.opengl.GLES30;
 import android.util.Log;
+
 import java.io.Closeable;
 import java.io.IOException;
 import java.nio.ByteBuffer;
@@ -124,7 +145,7 @@ public class Texture implements Closeable {
 
   /** Create a texture from the given asset file name. */
   public static Texture createFromAsset(
-      SampleRender render, String assetFileName, WrapMode wrapMode, ColorFormat colorFormat)
+          SampleRender render, String assetFileName, WrapMode wrapMode, ColorFormat colorFormat)
       throws IOException {
     Texture texture = new Texture(render, Target.TEXTURE_2D, wrapMode);
     Bitmap bitmap = null;
@@ -197,4 +218,91 @@ public class Texture implements Closeable {
     bitmap.recycle();
     return result;
   }
+
+  /**
+   * loading a cubemap inside Open GL
+   *
+   * faces should be 6 Strings.
+   *
+   * Here is the order of the faces in the loop
+   * GL_TEXTURE_CUBE_MAP_POSITIVE_X	Right
+   * GL_TEXTURE_CUBE_MAP_NEGATIVE_X	Left
+   * GL_TEXTURE_CUBE_MAP_POSITIVE_Y	Top
+   * GL_TEXTURE_CUBE_MAP_NEGATIVE_Y	Bottom
+   * GL_TEXTURE_CUBE_MAP_POSITIVE_Z	Back
+   * GL_TEXTURE_CUBE_MAP_NEGATIVE_Z	Front
+   */
+  public static Texture loadCubemap(SampleRender render,
+                                    String[] faces,
+                                    WrapMode wrapMode,
+                                    ColorFormat colorFormat) throws IOException {
+    //GL_TEXTURE_CUBE_MAP
+    Texture texture = new Texture(render, Target.TEXTURE_CUBE_MAP, wrapMode);
+
+    //int width, height, nrChannels;
+    // create TexImage2D with createFromAssetForCubemap() corresponding code part
+    Bitmap bitmap = null;
+    for (int i = 0; i < faces.length; i++) {
+      bitmap =
+              convertBitmapToConfig(
+                      BitmapFactory.decodeStream(render.getAssets().open(faces[i])),
+                      Bitmap.Config.ARGB_8888);
+
+      // flip bitmaps except for the top, because we see the inside of the cube
+      if (i != 2) {
+        Matrix flipMatrix = new Matrix();
+        flipMatrix.postScale(-1, 1); // flip horizontally
+        bitmap = Bitmap.createBitmap(bitmap, 0, 0, bitmap.getWidth(),
+                bitmap.getHeight(), flipMatrix, true); // apply the transformation
+      } else {
+        Matrix flipMatrix = new Matrix();
+        flipMatrix.postScale(1, -1); // flip vertically
+        bitmap = Bitmap.createBitmap(bitmap, 0, 0, bitmap.getWidth(),
+                bitmap.getHeight(), flipMatrix, true); // apply the transformation
+      }
+
+      ByteBuffer buffer = ByteBuffer.allocateDirect(bitmap.getByteCount());
+      bitmap.copyPixelsToBuffer(buffer);
+      buffer.rewind();
+
+      //GLES30.glBindTexture(GLES30.GL_TEXTURE_2D, texture.getTextureId());
+      //GLError.maybeThrowGLException("Failed to bind texture", "glBindTexture");
+      GLES30.glTexImage2D(
+              GLES30.GL_TEXTURE_CUBE_MAP_POSITIVE_X + i,
+              0,
+              colorFormat.glesEnum,
+              bitmap.getWidth(),
+              bitmap.getHeight(),
+              /*border=*/ 0,
+              GLES30.GL_RGBA,
+              GLES30.GL_UNSIGNED_BYTE,
+              buffer
+      );
+      // free image data ? to do
+      /**if (data) ...
+       else {
+       System.out.println("[ERROR] VRapp/loadCubemap : Cubemap tex failed to load at path " +
+       faces[i]);
+       // free image data ? to do
+       }*/
+    }
+    // add parameters
+    GLES30.glTexParameteri(GLES30.GL_TEXTURE_CUBE_MAP,
+            GLES30.GL_TEXTURE_MAG_FILTER,
+            GLES30.GL_LINEAR);
+    GLES30.glTexParameteri(GLES30.GL_TEXTURE_CUBE_MAP,
+            GLES30.GL_TEXTURE_MIN_FILTER,
+            GLES30.GL_LINEAR);
+    GLES30.glTexParameteri(GLES30.GL_TEXTURE_CUBE_MAP,
+            GLES30.GL_TEXTURE_WRAP_S,
+            GLES30.GL_CLAMP_TO_EDGE);
+    GLES30.glTexParameteri(GLES30.GL_TEXTURE_CUBE_MAP,
+            GLES30.GL_TEXTURE_WRAP_T,
+            GLES30.GL_CLAMP_TO_EDGE);
+    GLES30.glTexParameteri(GLES30.GL_TEXTURE_CUBE_MAP,
+            GLES30.GL_TEXTURE_WRAP_R,
+            GLES30.GL_CLAMP_TO_EDGE);
+
+    return texture;
+  }
 }
